const express = require('express');
// npm install express-validator
const { param, validationResult } = require('express-validator');
const router = express.Router();

const db = require('./database');


/**
 * Authenticate a user in PostgreSQL using parametrized queries
 * @param {*} req 
 * @param {*} res 
 */
const secPosgtgreSQLAuth = async (req, res) => {
    const user_param = req.params.user;
    const passwd_param = req.params.passwd;
    try {
        const response = await db.authenticatePostgreSQLUserParamQueries(user_param, passwd_param);
        if (response && response.length > 0) {
            res
                .status(200)
                .json(response);
        } else {
            res.status(204).json({ status: 'no data found' });
        }
    } catch (error) {
        console.error('Error executing query for secPosgtgreSQLAuth', error);
        res
            .status(500)
            .json({ error: `Error getting user ${username} - ${error?.message || error}` });
    }
};


/**
 * Authenticate a user in PostgreSQL using regexp
 * @param {*} req 
 * @param {*} res 
 */
const secGetUserPostgreSQL = async (req, res) => {
    const regex = new RegExp('^[a-zA-Z\s]+$')
    const user_param = req.params.username;
    try {
        if (!regex.test(user_param)) {
            res
                .status(400)
                .json({ error: 'Invalid username' });
        }
        const response = await db.getSecurePostgreSQLUser(user_param);
        if (response && response.length > 0) {
            res
                .status(200)
                .json(response);
        } else {
            res.status(204).json({ status: 'no data found' });
        }
    } catch (error) {
        console.error('Error executing query for secGetUserPostgreSQL', error);
        res
            .status(500)
            .json({ error: `Error getting user ${username} - ${error?.message || error}` });
    }
};


/**
 * Get a user using Input Validations with express-validations
 * @param {*} req 
 * @param {*} res 
 */
const secGetUserPostgreSQLInputValidation = async (req, res) => {
    const user_param = req.params.username;
    try {
        const errors = validationResult(req);
        if (!errors.isEmpty()) {
            return res.status(400).json({ errors: errors.array() });
        }
        const response = await db.getSecurePostgreSQLUser(user_param);
        if (response && response.length > 0) {
            res
                .status(200)
                .json(response);
        } else {
            res.status(204).json({ status: 'no data found' });
        }
    } catch (error) {
        console.error('Error executing query for secGetUserPostgreSQL', error);
        res
            .status(500)
            .json({ error: `Error getting user ${username} - ${error?.message || error}` });
    }
};

/*
Endpoint conventions for this route:
GET "/secure/pg/user/:user/:passwd" 
GET "/secure/pg/user/:username" 
GET "/secure/pg/user/input/:username" 
*/
router
    .get('/pg/user_auth/:user/:passwd', secPosgtgreSQLAuth)
    .get('/pg/user/:username', secGetUserPostgreSQL)
    .get('/pg/user/input/:username',
        [param('username')
            .matches(/^[a-zA-Z\s]+$/)
            .withMessage('Username is not valid')], secGetUserPostgreSQLInputValidation)


module.exports = router;