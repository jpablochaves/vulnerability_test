const { Pool } = require('pg');

// Create a PostgreSQL connection pool
const pg_pool = new Pool({
    user: process.env.PGUSER || 'test',
    password: process.env.PGPASSWORD || 'test',
    host: process.env.PGHOST || 'localhost', // This matches the service name defined in the docker-compose.yml if network_mode is not "host"
    database: process.env.PGDB || 'testdb',
    port: 5432,
});


/**
 * Creates the users table and add some rows to it (PostgreSQL)
 * @returns true if ok and false otherwise
 */
const setupPostgreSQLDB = async () => {
    try {
        const client = await pg_pool.connect();
        // users table
        await client.query(`
        CREATE TABLE IF NOT EXISTS users (
          id SERIAL PRIMARY KEY,
          username VARCHAR(100) NOT NULL,
          password VARCHAR(100) NOT NULL,
          email VARCHAR(200) NOT NULL,
          description VARCHAR(100) NULL,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
      `);
        // salary table
        await client.query(`
        CREATE TABLE IF NOT EXISTS salary (
            id SERIAL PRIMARY KEY,
            user_id INTEGER REFERENCES users(id),
            amount DECIMAL(10, 2) NOT NULL
          )
        `);
        // add some users
        await client.query(`
        INSERT INTO users (username, password, email, description) VALUES 
        ('test', 'test123', 'test@company.com', 'test user'),
        ('admin', 'NGRtMW4=', 'admin@company.com', 'admin user in base64'),
        ('sysadmin', '6a4e4054fa6e08046c40df5745530cdde6e4e091de831d04d7d902635b9350ac', 'sysadmin@company.com', 'sysadmin user all privileges in sha256')
        `);
        // add records for salaries
        await client.query(`
        INSERT INTO salary (user_id, amount) VALUES
        (1, 5000.00),
        (2, 8000.00),
        (3, 10000.00);
        `)
        client.release();
    } catch (error) {
        console.error('Error creating table users for PostgreSQL DB:', error);
        return false;
    }
    return true;
};


// ----------------------------------------------------------------
// INSECURE OR VULNERABLE FOR SQLi FUNCTIONS
// ----------------------------------------------------------------

/**
 * Queries the PosgreSQL DB for all the users  
 * @returns rows obtained from the DB
 */
const getPostgreSQLUsers = async () => {
    try {
        const client = await pg_pool.connect();
        const result = await client.query('SELECT * FROM users');
        client.release();
        return result.rows;
    } catch (error) {
        console.error('Error executing getPostgreSQLUsers', error);
    }
};

/**
 * Query the PostgreSQL DB for an specific user (SQLi vulnerable)
 * @param {*} username request username parameter
 * @returns rows obtained from the DB
 */
const getPostgreSQLUser = async (username) => {
    try {
        const client = await pg_pool.connect();
        const query = "SELECT * FROM users WHERE username = '" + username + "'"
        console.log(`*** QUERY for /pg/users/${username}:\n${query}`)
        const result = await client.query(query);
        client.release();
        return result.rows;
    } catch (error) {
        console.error('Error executing getPostgreSQLUser', error);
    }
};

/**
 * Query the PostgreSQL DB for an specific user with a matching password (SQLi vulnerable)
 * @param {*} user request username parameter
 * @param {*} passwd request password parameter
 * @returns rows obtained from the DB
 */
const authenticatePostgreSQLUser = async (user, passwd) => {
    try {
        const client = await pg_pool.connect();
        const query = "SELECT * FROM users WHERE username = '" + user + "' and password = '" + passwd + "'"
        console.log(`*** QUERY for /pg/user_auth/${user}/${passwd}:\n${query}`)
        const result = await client.query(query);
        client.release();
        return result.rows;
    } catch (error) {
        console.error('Error executing authenticatePostgreSQLUser', error);
    }
};



// ----------------------------------------------------------------
// SECURE OR NON-VULNERABLE FOR SQLi FUNCTIONS
// USE OF: 
// - Parametrized queries 
// - Inpunt validation (express-validator or regexp validation)
// - Using ORMs (like sequelize)
// ----------------------------------------------------------------

/**
 *  Authenticate a user using Parametrized queries
 * @param {*} user username parameter
 * @param {*} passwd password parameter
 * @returns 
 */
const authenticatePostgreSQLUserParamQueries = async (user, passwd) => {
    try {
        const client = await pg_pool.connect();
        const query = "SELECT * FROM users WHERE username = $1 AND password = $2"
        const result = await client.query(query, [user, passwd]);
        client.release();
        return result.rows;
    } catch (error) {
        console.error('Error executing authenticatePostgreSQLUserParamQueries', error);
    }
};

/**
 * Get a username from the PostgreSQL database
 * @param {*} user username to search 
 * @returns 
 */
const getSecurePostgreSQLUser = async (user) => {
    try {
        const client = await pg_pool.connect();
        const query = "SELECT * FROM users WHERE username = $1"
        const result = await client.query(query, [user]);
        client.release();
        return result.rows;
    } catch (error) {
        console.error('Error executing getSecurePostgreSQLUsers', error);
    }
};

/**
 * Get a username from the PostgreSQL database
 * @param {*} user username to search 
 * @returns 
 */
const getSecurePostgreSQLInputValidation = async (user) => {
    try {
        const client = await pg_pool.connect();
        const query = "SELECT * FROM users WHERE username = $1"
        const result = await client.query(query, [user]);
        client.release();
        return result.rows;
    } catch (error) {
        console.error('Error executing getSecurePostgreSQLUsers', error);
    }
};


module.exports = {
    setupPostgreSQLDB,
    getPostgreSQLUser,
    getPostgreSQLUsers,
    authenticatePostgreSQLUser,
    authenticatePostgreSQLUserParamQueries,
    getSecurePostgreSQLUser,
}