const express = require('express');
const router = express.Router();

const db = require('./database');


/**
 * Get all the users in the PostgreSQL DB
 * @param {*} req 
 * @param {*} res 
 */
const getPostgreSQLUsers = async (req, res) => {
    try {
        const response = await db.getPostgreSQLUsers();
        if (response && response.length > 0) {
            res
                .status(200)
                .json(response);
        } else {
            res.status(204).json({ status: 'no data found' });
        }
    } catch (error) {
        res
            .status(error?.status || 500)
            .json({ status: `Error getting users for PostgreSQL DB ${error?.message || error}` });
    }
};


/**
 * Test for SQLi vulnerability with the username input 
 * @param {*} req 
 * @param {*} res 
 */
const getPostgreSQLUser = async (req, res) => {
    const username_param = req.params.username;
    try {
        const response = await db.getPostgreSQLUser(username_param);
        if (response && response.length > 0) {
            res
                .status(200)
                .json(response);
        } else {
            res.status(204).json({ status: 'no data found' });
        }
    } catch (error) {
        console.error('Error executing query for getPostgreSQLUser', error);
        res
            .status(500)
            .json({ error: `Error getting user ${username} - ${error?.message || error}` });
    }
};

/**
 * Test for SQLi vulnerability when authenticating with the username and password 
 * @param {*} req 
 * @param {*} res 
 */
const authenticatePostgreSQLUser = async (req, res) => {
    const user_param = req.params.user;
    const passwd_param = req.params.passwd;
    try {
        const response = await db.authenticatePostgreSQLUser(user_param, passwd_param);
        if (response && response.length > 0) {
            res
                .status(200)
                .json(response);
        } else {
            res.status(204).json({ status: 'no data found' });
        }
    } catch (error) {
        console.error('Error executing query for authenticatePostgreSQLUser', error);
        res
            .status(500)
            .json({ error: `Error getting user ${username} - ${error?.message || error}` });
    }
};

/**
 * Test for SQLi vulnerability when authenticating with the username and password but in this case using
 * GET or query parameters instead of path parameters
 * @param {*} req 
 * @param {*} res 
 */
const authenticatePostgreSQLUserGetParams = async (req, res) => {
    const user_query_param = req.query.username;
    const passwd_query_param = req.query.password;
    try {
        const response = await db.authenticatePostgreSQLUser(user_query_param, passwd_query_param);
        if (response && response.length > 0) {
            res
                .status(200)
                .json(response);
        } else {
            res.status(204).json({ status: 'no data found' });
        }
    } catch (error) {
        console.error('Error executing query for authenticatePostgreSQLUserGetParams', error);
        res
            .status(500)
            .json({ error: `Error getting user ${user_query_param} - ${error?.message || error}` });
    }
};


/**
 * Test for SQLi vulnerability when authenticating with the username and password but in this case using
 * POST
 * @param {*} req 
 * @param {*} res 
 */
const authenticatePostgreSQLUserPOST = async (req, res) => {
    // Extract the data from the request body
    const { username, password } = req.body;
    console.log(`***POST - Request body\nUsername: ${username}\nPassword: ${password}`);
    try {
        const response = await db.authenticatePostgreSQLUser(username, password);
        if (response && response.length > 0) {
            res
                .status(200)
                .json(response);
        } else {
            res.status(204).json({ status: 'no data found' });
        }
    } catch (error) {
        console.error('Error executing query for authenticatePostgreSQLUserPOST', error);
        res
            .status(500)
            .json({ error: `Error getting user ${username} - ${error?.message || error}` });
    }
};

/*
Endpoint conventions for this route:
GET "/vulnerable/pg/user/:username" 
GET "/vulnerable/pg/user_auth/:user/:passwd" 
GET "/vulnerable/pg/users" 
GET "/vulnerable/pg/user_auth/"
*/
router
    .get('/pg/user', getPostgreSQLUsers)
    .get('/pg/user/:username', getPostgreSQLUser)
    .get('/pg/user_auth/:user/:passwd', authenticatePostgreSQLUser)
    .get('/pg/user_auth/', authenticatePostgreSQLUserGetParams)
    .post('/pg/user_auth/', authenticatePostgreSQLUserPOST)


module.exports = router;